{"ast":null,"code":"var _jsxFileName = \"/home/sol/github.com/solkn/chat-app-reactjs/src/pages/messenger/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { logOut } from \"../../store/user/action\";\nimport BottomBar from \"../../components/bottom-bar\";\nimport UserNavBar from \"../../components/user_nav\";\nimport { Input, Form, Button, Spin } from \"antd\";\nimport { fetchMessagesAsync, createMessageAsync } from \"../../store/message/action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Messenger = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    messages,\n    fetchMessagesLoading\n  } = useSelector(state => state.message);\n  const {\n    createMessageLoading,\n    createMessageError\n  } = useSelector(state => state.message);\n  useEffect(() => {\n    dispatch(fetchMessagesAsync());\n  }, []);\n\n  const onhandleSubmit = value => {\n    const {\n      msg,\n      msgFrom,\n      msgTo\n    } = value;\n    dispatch(createMessageAsync(msg, msgFrom, msgTo));\n  };\n\n  if (fetchMessagesLoading || !messages) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(UserNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"550px\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Loading messages...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BottomBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UserNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messenger\",\n      style: {\n        marginLeft: 400,\n        marginTop: 10,\n        width: 500\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 22,\n          color: \"blue\",\n          marginBottom: 10\n        },\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: message.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      initialValues: {},\n      onFinish: onhandleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"message\",\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          rows: 4,\n          placeholder: \"write some thing\",\n          style: {\n            marginLeft: 400,\n            marginTop: 10,\n            width: 400\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"sender\",\n        rules: [{\n          required: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          size: \"large\",\n          placeholder: \"sender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"receiver\",\n        rules: [{\n          required: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          size: \"large\",\n          placeholder: \"receiver\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            style: {\n              width: \"100px\",\n              height: 50,\n              marginTop: -115,\n              marginLeft: 450,\n              borderRadius: 30,\n              display: \"block\"\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(BottomBar, {\n      style: {\n        marginTop: -200,\n        position: \"absolute\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Messenger, \"sibcxnP4ADLC1xSVfkEYXklwX2o=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector];\n});\n\n_c = Messenger;\nexport default Messenger; // function MessageContainer ({ messageData,fetchMessages }){\n//   useEffect(()=>{ \n//       fetchMessages()\n//   },[])\n//   return (\n//     messageData.fetchMessagesLoading ?(\n//       <h2>Loading</h2>\n//     ):messageData.fetchMessagesError?(\n//       <h2>{ messageData.fetchMessagesError }</h2>\n//     ):\n//     (\n//       <div>\n//         <h2>Messages List</h2>\n//          <div>\n//            {\n//             //  messageData &&\n//             //  messageData.messages &&\n//               messageData.messages.map(message => console.log(message.msg))\n//            }\n//          </div>\n//       </div>\n//     )\n//   )\n// }\n// const mapStateToProps = state => {\n//   return {\n//       messageData: state.message\n//   }\n// }\n// const mapDispatchToProps = dispatch => {\n//   return {\n//       fetchMessages: () => dispatch(fetchMessagesAsync())\n//   }\n// }\n// export default connect(mapStateToProps,mapDispatchToProps)(MessageContainer)\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"sources":["/home/sol/github.com/solkn/chat-app-reactjs/src/pages/messenger/index.jsx"],"names":["useState","useEffect","useHistory","connect","useDispatch","useSelector","logOut","BottomBar","UserNavBar","Input","Form","Button","Spin","fetchMessagesAsync","createMessageAsync","Messenger","dispatch","history","messages","fetchMessagesLoading","state","message","createMessageLoading","createMessageError","onhandleSubmit","value","msg","msgFrom","msgTo","width","height","display","justifyContent","alignItems","marginLeft","marginTop","fontSize","color","marginBottom","map","required","borderRadius","position"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,KAAT,EAAeC,IAAf,EAAoBC,MAApB,EAA2BC,IAA3B,QAAsC,MAAtC;AACA,SAASC,kBAAT,EAA4BC,kBAA5B,QAAsD,4BAAtD;;;;AAGA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEtB,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,OAAO,GAAGf,UAAU,EAA1B;AAIA,QAAM;AAAEgB,IAAAA,QAAF;AAAWC,IAAAA;AAAX,MAAoCd,WAAW,CAC7Ce,KAAK,IAAIA,KAAK,CAACC,OAD8B,CAArD;AAGK,QAAM;AAAEC,IAAAA,oBAAF;AAAuBC,IAAAA;AAAvB,MAA8ClB,WAAW,CAC1De,KAAK,IAAIA,KAAK,CAACC,OAD2C,CAA/D;AAILpB,EAAAA,SAAS,CAAC,MAAM;AAEde,IAAAA,QAAQ,CAACH,kBAAkB,EAAnB,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;;AAMD,QAAMW,cAAc,GAAIC,KAAD,IAAW;AAC7B,UAAM;AAAEC,MAAAA,GAAF;AAAMC,MAAAA,OAAN;AAAcC,MAAAA;AAAd,QAAuBH,KAA7B;AAEDT,IAAAA,QAAQ,CAACF,kBAAkB,CAACY,GAAD,EAAKC,OAAL,EAAaC,KAAb,CAAnB,CAAR;AAEF,GALF;;AAQC,MAAIT,oBAAoB,IAAI,CAACD,QAA7B,EAAuC;AACrC,wBACE;AAAA,8BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,KAAK,EAAE;AACLW,UAAAA,KAAK,EAAE,MADF;AAELC,UAAAA,MAAM,EAAE,OAFH;AAGLC,UAAAA,OAAO,EAAE,MAHJ;AAILC,UAAAA,cAAc,EAAE,QAJX;AAKLC,UAAAA,UAAU,EAAE;AALP,SADT;AAAA,+BASE,QAAC,IAAD;AAAM,UAAA,GAAG,EAAC;AAAV;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,cAFF,eAcE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA,oBADF;AAkBD;;AACD,sBACE;AAAA,4BACA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADA,eAGA;AAAK,MAAA,EAAE,EAAE,WAAT;AAAqB,MAAA,KAAK,EAAE;AAACC,QAAAA,UAAU,EAAC,GAAZ;AAAgBC,QAAAA,SAAS,EAAC,EAA1B;AAA6BN,QAAAA,KAAK,EAAC;AAAnC,OAA5B;AAAA,8BAES;AAAK,QAAA,KAAK,EAAE;AAACO,UAAAA,QAAQ,EAAC,EAAV;AAAaC,UAAAA,KAAK,EAAC,MAAnB;AAA0BC,UAAAA,YAAY,EAAC;AAAvC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFT,eAGM;AAAA,+BAEE;AAAA,oBAEKpB,QAAQ,CAACqB,GAAT,CAAclB,OAAD,iBAEZ;AAAA,sBAAKA,OAAO,CAACK;AAAb;AAAA;AAAA;AAAA;AAAA,kBAFD;AAFL;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cAHN;AAAA;AAAA;AAAA;AAAA;AAAA,YAHA,eAqBD,QAAC,IAAD;AAAM,MAAA,aAAa,EAAE,EAArB;AAAyB,MAAA,QAAQ,EAAEF,cAAnC;AAAA,8BAEO,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,IAAI,EAAC,SADP;AAAA,+BAGE,QAAC,KAAD,CAAO,QAAP;AAAgB,UAAA,IAAI,EAAE,CAAtB;AAAyB,UAAA,WAAW,EAAC,kBAArC;AACQ,UAAA,KAAK,EAAE;AAACU,YAAAA,UAAU,EAAC,GAAZ;AAAgBC,YAAAA,SAAS,EAAC,EAA1B;AAA6BN,YAAAA,KAAK,EAAC;AAAnC;AADf;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,cAFP,eASO,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,KAAK,EAAE,CACL;AAAEW,UAAAA,QAAQ,EAAE;AAAZ,SADK,CAFT;AAAA,+BAME,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,WAAW,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,cATP,eAmBO,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,KAAK,EAAE,CAAC;AAAEA,UAAAA,QAAQ,EAAE;AAAZ,SAAD,CAFT;AAAA,+BAIE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,WAAW,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,cAnBP,eA0BO,QAAC,IAAD,CAAM,IAAN;AAAA,+BACE;AACE,UAAA,KAAK,EAAE;AACLT,YAAAA,OAAO,EAAE,MADJ;AAELC,YAAAA,cAAc,EAAE;AAFX,WADT;AAAA,iCAME,QAAC,MAAD;AACE,YAAA,IAAI,EAAC,SADP;AAEE,YAAA,QAAQ,EAAC,QAFX;AAGE,YAAA,KAAK,EAAE;AAAEH,cAAAA,KAAK,EAAE,OAAT;AAAiBC,cAAAA,MAAM,EAAC,EAAxB;AAA2BK,cAAAA,SAAS,EAAC,CAAC,GAAtC;AACPD,cAAAA,UAAU,EAAC,GADJ;AACQO,cAAAA,YAAY,EAAC,EADrB;AACwBV,cAAAA,OAAO,EAAC;AADhC,aAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA1BP;AAAA;AAAA;AAAA;AAAA;AAAA,YArBC,eAmEF,QAAC,SAAD;AAAW,MAAA,KAAK,EAAE;AAACI,QAAAA,SAAS,EAAC,CAAC,GAAZ;AAAgBO,QAAAA,QAAQ,EAAC;AAAzB;AAAlB;AAAA;AAAA;AAAA;AAAA,YAnEE;AAAA,kBADF;AAuED,CAvHD;;GAAM3B,S;UAEaX,W,EACDF,U,EAI0BG,W,EAGeA,W;;;KAVrDU,S;AAwHN,eAAeA,SAAf,C,CAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { logOut } from \"../../store/user/action\";\nimport BottomBar from \"../../components/bottom-bar\";\nimport UserNavBar from \"../../components/user_nav\";\nimport { Input,Form,Button,Spin} from \"antd\";\nimport { fetchMessagesAsync,createMessageAsync } from \"../../store/message/action\";\n\n\nconst Messenger = () => {\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n\n\n  const { messages,fetchMessagesLoading,} = useSelector(\n          state => state.message);\n     \n       const { createMessageLoading,createMessageError } = useSelector(\n            state => state.message);\n  \n\n  useEffect(() => {\n    \n    dispatch(fetchMessagesAsync());\n  }, []);\n\n \n const onhandleSubmit = (value) => {\n      const { msg,msgFrom,msgTo} = value\n     \n     dispatch(createMessageAsync(msg,msgFrom,msgTo));\n     \n  };\n\n\n  if (fetchMessagesLoading || !messages) {\n    return (\n      <>\n        <UserNavBar />\n        <div\n          style={{\n            width: \"100%\",\n            height: \"550px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Spin tip=\"Loading messages...\" />\n        </div>\n\n        <BottomBar/>\n      </>\n    );\n  }\n  return (\n    <>\n    <UserNavBar/>\n\n    <div id =\"messenger\" style={{marginLeft:400,marginTop:10,width:500}}>\n         \n             <div style={{fontSize:22,color:\"blue\",marginBottom:10}}>Messages</div>\n          <div>\n            \n            <ul>\n              {\n                 messages.map((message) =>\n                  (\n                  <li>{message.msg}</li>\n                 ))\n              }\n            </ul>\n           \n         </div>\n    </div>\n    \n    \n   <Form initialValues={{}} onFinish={onhandleSubmit}>\n        \n          <Form.Item\n            name=\"message\"\n          >\n            <Input.TextArea rows={4} placeholder=\"write some thing\" \n                    style={{marginLeft:400,marginTop:10,width:400}} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"sender\"\n            rules={[\n              { required: true},\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"sender\" />\n          </Form.Item>\n\n\n          <Form.Item\n            name=\"receiver\"\n            rules={[{ required: true}]}\n          >\n            <Input size=\"large\" placeholder=\"receiver\" />\n          </Form.Item>\n\n          <Form.Item>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                style={{ width: \"100px\",height:50,marginTop:-115,\n                marginLeft:450,borderRadius:30,display:\"block\" }}\n              >\n                Send\n              </Button>\n            </div>\n          </Form.Item>\n   \n        </Form>\n\n  <BottomBar style={{marginTop:-200,position:\"absolute\"}}/>\n    </>\n  );\n};\nexport default Messenger;\n\n\n\n\n// function MessageContainer ({ messageData,fetchMessages }){\n\n//   useEffect(()=>{ \n//       fetchMessages()\n//   },[])\n\n//   return (\n//     messageData.fetchMessagesLoading ?(\n//       <h2>Loading</h2>\n//     ):messageData.fetchMessagesError?(\n\n//       <h2>{ messageData.fetchMessagesError }</h2>\n//     ):\n    \n//     (\n//       <div>\n//         <h2>Messages List</h2>\n//          <div>\n//            {\n//             //  messageData &&\n//             //  messageData.messages &&\n//               messageData.messages.map(message => console.log(message.msg))\n//            }\n//          </div>\n//       </div>\n//     )\n//   )\n\n// }\n\n\n// const mapStateToProps = state => {\n//   return {\n//       messageData: state.message\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//       fetchMessages: () => dispatch(fetchMessagesAsync())\n//   }\n// }\n\n// export default connect(mapStateToProps,mapDispatchToProps)(MessageContainer)"]},"metadata":{},"sourceType":"module"}